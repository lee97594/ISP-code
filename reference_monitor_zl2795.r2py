TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    mycontext['debug'] = False

    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Bfile = openfile(self.Bfn,create)
      
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn,False)

      else:
        self.Afile = openfile(self.Afn,create)
        self.Afile.writeat('SE',0)

    else:
      self.Bfile = openfile(self.Bfn, True) #create .b file
      self.Afile = openfile(self.Afn, False) #open .a file

    mycontext['Lock']= createlock()

  def writeat(self,data,offset):
    mycontext['Lock'].acquire(True)
    try:
      self.Bfile.writeat(data,offset)
      mycontext['Lock'].release()					#releasing the lock in case no exceptions raised

    except:
      mycontext['Lock'].release()					#releaseing lock in case exception raised
      return

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    mycontext['Lock'].acquire(True)
    try:
      read = self.Afile.readat(bytes,offset)
      mycontext['Lock'].release()		#releaseing lock in case exception raised
      return read

    except:
      mycontext['Lock'].release()		#releaseing lock
      return ""


  def close(self):
    s = []
    mycontext['Lock'].acquire(True)
    content = self.Bfile.readat(None, 0)
    s = list(content)    
    mycontext['Lock'].release()
    
    try:
      if (s[-1]=='E' and s[0] == 'S'):
        self.Afile.close()
        removefile(self.Afn)
        self.Afile = openfile(self.Afn, True)
        mycontext['Lock'].acquire(True)
        self.Afile.writeat(content, 0)
        mycontext['Lock'].release()    

    except:
      pass
    
    self.Bfile.close()
    self.Afile.close()
    removefile(self.Bfn)
    

def ABopenfile(filename, create):
  return ABFile(filename,create)
  
# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()